// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package tlcli

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Name
//  - ID
//  - Columns
//  - Idx
type TableBean struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  ID *int64 `thrift:"id,2" db:"id" json:"id,omitempty"`
  Columns map[string][]byte `thrift:"columns,3" db:"columns" json:"columns,omitempty"`
  Idx map[string]int8 `thrift:"Idx,4" db:"Idx" json:"Idx,omitempty"`
}

func NewTableBean() *TableBean {
  return &TableBean{}
}


func (p *TableBean) GetName() string {
  return p.Name
}
var TableBean_ID_DEFAULT int64
func (p *TableBean) GetID() int64 {
  if !p.IsSetID() {
    return TableBean_ID_DEFAULT
  }
return *p.ID
}
var TableBean_Columns_DEFAULT map[string][]byte

func (p *TableBean) GetColumns() map[string][]byte {
  return p.Columns
}
var TableBean_Idx_DEFAULT map[string]int8

func (p *TableBean) GetIdx() map[string]int8 {
  return p.Idx
}
func (p *TableBean) IsSetID() bool {
  return p.ID != nil
}

func (p *TableBean) IsSetColumns() bool {
  return p.Columns != nil
}

func (p *TableBean) IsSetIdx() bool {
  return p.Idx != nil
}

func (p *TableBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *TableBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TableBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *TableBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Columns =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Columns[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TableBean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int8, size)
  p.Idx =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _val3 = temp
}
    p.Idx[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TableBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TableBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TableBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *TableBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  }
  return err
}

func (p *TableBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetColumns() {
    if err := oprot.WriteFieldBegin(ctx, "columns", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Columns)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Columns {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err) }
  }
  return err
}

func (p *TableBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIdx() {
    if err := oprot.WriteFieldBegin(ctx, "Idx", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Idx: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.BYTE, len(p.Idx)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Idx {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteByte(ctx, int8(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Idx: ", p), err) }
  }
  return err
}

func (p *TableBean) Equals(other *TableBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.ID != other.ID {
    if p.ID == nil || other.ID == nil {
      return false
    }
    if (*p.ID) != (*other.ID) { return false }
  }
  if len(p.Columns) != len(other.Columns) { return false }
  for k, _tgt := range p.Columns {
    _src4 := other.Columns[k]
    if bytes.Compare(_tgt, _src4) != 0 { return false }
  }
  if len(p.Idx) != len(other.Idx) { return false }
  for k, _tgt := range p.Idx {
    _src5 := other.Idx[k]
    if _tgt != _src5 { return false }
  }
  return true
}

func (p *TableBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TableBean(%+v)", *p)
}

func (p *TableBean) Validate() error {
  return nil
}
// Attributes:
//  - ID
//  - TBean
type DataBean struct {
  ID int64 `thrift:"id,1,required" db:"id" json:"id"`
  TBean map[string][]byte `thrift:"tBean,2" db:"tBean" json:"tBean,omitempty"`
}

func NewDataBean() *DataBean {
  return &DataBean{}
}


func (p *DataBean) GetID() int64 {
  return p.ID
}
var DataBean_TBean_DEFAULT map[string][]byte

func (p *DataBean) GetTBean() map[string][]byte {
  return p.TBean
}
func (p *DataBean) IsSetTBean() bool {
  return p.TBean != nil
}

func (p *DataBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  return nil
}

func (p *DataBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DataBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.TBean =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
var _val7 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val7 = v
}
    p.TBean[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DataBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DataBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DataBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTBean() {
    if err := oprot.WriteFieldBegin(ctx, "tBean", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tBean: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.TBean)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.TBean {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tBean: ", p), err) }
  }
  return err
}

func (p *DataBean) Equals(other *DataBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if len(p.TBean) != len(other.TBean) { return false }
  for k, _tgt := range p.TBean {
    _src8 := other.TBean[k]
    if bytes.Compare(_tgt, _src8) != 0 { return false }
  }
  return true
}

func (p *DataBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataBean(%+v)", *p)
}

func (p *DataBean) Validate() error {
  return nil
}
// Attributes:
//  - Ok
//  - ErrCode
//  - ErrorDesc
type Ack struct {
  Ok bool `thrift:"ok,1,required" db:"ok" json:"ok"`
  ErrCode int64 `thrift:"errCode,2,required" db:"errCode" json:"errCode"`
  ErrorDesc string `thrift:"errorDesc,3,required" db:"errorDesc" json:"errorDesc"`
}

func NewAck() *Ack {
  return &Ack{}
}


func (p *Ack) GetOk() bool {
  return p.Ok
}

func (p *Ack) GetErrCode() int64 {
  return p.ErrCode
}

func (p *Ack) GetErrorDesc() string {
  return p.ErrorDesc
}
func (p *Ack) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetOk bool = false;
  var issetErrCode bool = false;
  var issetErrorDesc bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetOk = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetErrCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetErrorDesc = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetOk{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ok is not set"));
  }
  if !issetErrCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrCode is not set"));
  }
  if !issetErrorDesc{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorDesc is not set"));
  }
  return nil
}

func (p *Ack)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Ok = v
}
  return nil
}

func (p *Ack)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrCode = v
}
  return nil
}

func (p *Ack)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ErrorDesc = v
}
  return nil
}

func (p *Ack) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ack"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ack) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ok", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ok: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ok)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ok (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ok: ", p), err) }
  return err
}

func (p *Ack) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errCode", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errCode: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ErrCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errCode: ", p), err) }
  return err
}

func (p *Ack) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorDesc", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:errorDesc: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ErrorDesc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorDesc (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:errorDesc: ", p), err) }
  return err
}

func (p *Ack) Equals(other *Ack) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ok != other.Ok { return false }
  if p.ErrCode != other.ErrCode { return false }
  if p.ErrorDesc != other.ErrorDesc { return false }
  return true
}

func (p *Ack) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ack(%+v)", *p)
}

func (p *Ack) Validate() error {
  return nil
}
// Attributes:
//  - Seq
//  - Ack
type AckBean struct {
  Seq int64 `thrift:"seq,1,required" db:"seq" json:"seq"`
  Ack *Ack `thrift:"ack,2" db:"ack" json:"ack,omitempty"`
}

func NewAckBean() *AckBean {
  return &AckBean{}
}


func (p *AckBean) GetSeq() int64 {
  return p.Seq
}
var AckBean_Ack_DEFAULT *Ack
func (p *AckBean) GetAck() *Ack {
  if !p.IsSetAck() {
    return AckBean_Ack_DEFAULT
  }
return p.Ack
}
func (p *AckBean) IsSetAck() bool {
  return p.Ack != nil
}

func (p *AckBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSeq bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSeq = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSeq{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Seq is not set"));
  }
  return nil
}

func (p *AckBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *AckBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ack = &Ack{}
  if err := p.Ack.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ack), err)
  }
  return nil
}

func (p *AckBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AckBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AckBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *AckBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAck() {
    if err := oprot.WriteFieldBegin(ctx, "ack", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ack: ", p), err) }
    if err := p.Ack.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ack), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ack: ", p), err) }
  }
  return err
}

func (p *AckBean) Equals(other *AckBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Seq != other.Seq { return false }
  if !p.Ack.Equals(other.Ack) { return false }
  return true
}

func (p *AckBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AckBean(%+v)", *p)
}

func (p *AckBean) Validate() error {
  return nil
}
type Icli interface {
  // Parameters:
  //  - I
  Ping(ctx context.Context, i int64) (_r *Ack, _err error)
  // Parameters:
  //  - S
  Auth(ctx context.Context, s string) (_r *Ack, _err error)
  // Parameters:
  //  - Tb
  Create(ctx context.Context, tb *TableBean) (_r *Ack, _err error)
  // Parameters:
  //  - Tb
  Alter(ctx context.Context, tb *TableBean) (_r *Ack, _err error)
  // Parameters:
  //  - Name
  Drop(ctx context.Context, name string) (_r *Ack, _err error)
  // Parameters:
  //  - Name
  SelectId(ctx context.Context, name string) (_r int64, _err error)
  // Parameters:
  //  - Name
  //  - Column
  //  - Value
  SelectIdByIdx(ctx context.Context, name string, column string, value []byte) (_r int64, _err error)
  // Parameters:
  //  - Name
  //  - ID
  SelectById(ctx context.Context, name string, id int64) (_r *DataBean, _err error)
  // Parameters:
  //  - Name
  //  - Column
  //  - Value
  SelectByIdx(ctx context.Context, name string, column string, value []byte) (_r *DataBean, _err error)
  // Parameters:
  //  - Name
  //  - StartId
  //  - Limit
  SelectsByIdLimit(ctx context.Context, name string, startId int64, limit int64) (_r []*DataBean, _err error)
  // Parameters:
  //  - Name
  //  - Column
  //  - Value
  SelectAllByIdx(ctx context.Context, name string, column string, value []byte) (_r []*DataBean, _err error)
  // Parameters:
  //  - Name
  //  - Column
  //  - Value
  //  - StartId
  //  - Limit
  SelectByIdxLimit(ctx context.Context, name string, column string, value [][]byte, startId int64, limit int64) (_r []*DataBean, _err error)
  // Parameters:
  //  - Tb
  Update(ctx context.Context, tb *TableBean) (_r *AckBean, _err error)
  // Parameters:
  //  - Tb
  Delete(ctx context.Context, tb *TableBean) (_r *AckBean, _err error)
  // Parameters:
  //  - Tb
  Insert(ctx context.Context, tb *TableBean) (_r *AckBean, _err error)
  // Parameters:
  //  - Name
  ShowTable(ctx context.Context, name string) (_r *TableBean, _err error)
  ShowAllTables(ctx context.Context) (_r []*TableBean, _err error)
}

type IcliClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewIcliClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IcliClient {
  return &IcliClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewIcliClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IcliClient {
  return &IcliClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIcliClient(c thrift.TClient) *IcliClient {
  return &IcliClient{
    c: c,
  }
}

func (p *IcliClient) Client_() thrift.TClient {
  return p.c
}

func (p *IcliClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *IcliClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - I
func (p *IcliClient) Ping(ctx context.Context, i int64) (_r *Ack, _err error) {
  var _args9 IcliPingArgs
  _args9.I = i
  var _result11 IcliPingResult
  var _meta10 thrift.ResponseMeta
  _meta10, _err = p.Client_().Call(ctx, "Ping", &_args9, &_result11)
  p.SetLastResponseMeta_(_meta10)
  if _err != nil {
    return
  }
  if _ret12 := _result11.GetSuccess(); _ret12 != nil {
    return _ret12, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Ping failed: unknown result")
}

// Parameters:
//  - S
func (p *IcliClient) Auth(ctx context.Context, s string) (_r *Ack, _err error) {
  var _args13 IcliAuthArgs
  _args13.S = s
  var _result15 IcliAuthResult
  var _meta14 thrift.ResponseMeta
  _meta14, _err = p.Client_().Call(ctx, "Auth", &_args13, &_result15)
  p.SetLastResponseMeta_(_meta14)
  if _err != nil {
    return
  }
  if _ret16 := _result15.GetSuccess(); _ret16 != nil {
    return _ret16, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Auth failed: unknown result")
}

// Parameters:
//  - Tb
func (p *IcliClient) Create(ctx context.Context, tb *TableBean) (_r *Ack, _err error) {
  var _args17 IcliCreateArgs
  _args17.Tb = tb
  var _result19 IcliCreateResult
  var _meta18 thrift.ResponseMeta
  _meta18, _err = p.Client_().Call(ctx, "Create", &_args17, &_result19)
  p.SetLastResponseMeta_(_meta18)
  if _err != nil {
    return
  }
  if _ret20 := _result19.GetSuccess(); _ret20 != nil {
    return _ret20, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Create failed: unknown result")
}

// Parameters:
//  - Tb
func (p *IcliClient) Alter(ctx context.Context, tb *TableBean) (_r *Ack, _err error) {
  var _args21 IcliAlterArgs
  _args21.Tb = tb
  var _result23 IcliAlterResult
  var _meta22 thrift.ResponseMeta
  _meta22, _err = p.Client_().Call(ctx, "Alter", &_args21, &_result23)
  p.SetLastResponseMeta_(_meta22)
  if _err != nil {
    return
  }
  if _ret24 := _result23.GetSuccess(); _ret24 != nil {
    return _ret24, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Alter failed: unknown result")
}

// Parameters:
//  - Name
func (p *IcliClient) Drop(ctx context.Context, name string) (_r *Ack, _err error) {
  var _args25 IcliDropArgs
  _args25.Name = name
  var _result27 IcliDropResult
  var _meta26 thrift.ResponseMeta
  _meta26, _err = p.Client_().Call(ctx, "Drop", &_args25, &_result27)
  p.SetLastResponseMeta_(_meta26)
  if _err != nil {
    return
  }
  if _ret28 := _result27.GetSuccess(); _ret28 != nil {
    return _ret28, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Drop failed: unknown result")
}

// Parameters:
//  - Name
func (p *IcliClient) SelectId(ctx context.Context, name string) (_r int64, _err error) {
  var _args29 IcliSelectIdArgs
  _args29.Name = name
  var _result31 IcliSelectIdResult
  var _meta30 thrift.ResponseMeta
  _meta30, _err = p.Client_().Call(ctx, "SelectId", &_args29, &_result31)
  p.SetLastResponseMeta_(_meta30)
  if _err != nil {
    return
  }
  return _result31.GetSuccess(), nil
}

// Parameters:
//  - Name
//  - Column
//  - Value
func (p *IcliClient) SelectIdByIdx(ctx context.Context, name string, column string, value []byte) (_r int64, _err error) {
  var _args32 IcliSelectIdByIdxArgs
  _args32.Name = name
  _args32.Column = column
  _args32.Value = value
  var _result34 IcliSelectIdByIdxResult
  var _meta33 thrift.ResponseMeta
  _meta33, _err = p.Client_().Call(ctx, "SelectIdByIdx", &_args32, &_result34)
  p.SetLastResponseMeta_(_meta33)
  if _err != nil {
    return
  }
  return _result34.GetSuccess(), nil
}

// Parameters:
//  - Name
//  - ID
func (p *IcliClient) SelectById(ctx context.Context, name string, id int64) (_r *DataBean, _err error) {
  var _args35 IcliSelectByIdArgs
  _args35.Name = name
  _args35.ID = id
  var _result37 IcliSelectByIdResult
  var _meta36 thrift.ResponseMeta
  _meta36, _err = p.Client_().Call(ctx, "SelectById", &_args35, &_result37)
  p.SetLastResponseMeta_(_meta36)
  if _err != nil {
    return
  }
  if _ret38 := _result37.GetSuccess(); _ret38 != nil {
    return _ret38, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "SelectById failed: unknown result")
}

// Parameters:
//  - Name
//  - Column
//  - Value
func (p *IcliClient) SelectByIdx(ctx context.Context, name string, column string, value []byte) (_r *DataBean, _err error) {
  var _args39 IcliSelectByIdxArgs
  _args39.Name = name
  _args39.Column = column
  _args39.Value = value
  var _result41 IcliSelectByIdxResult
  var _meta40 thrift.ResponseMeta
  _meta40, _err = p.Client_().Call(ctx, "SelectByIdx", &_args39, &_result41)
  p.SetLastResponseMeta_(_meta40)
  if _err != nil {
    return
  }
  if _ret42 := _result41.GetSuccess(); _ret42 != nil {
    return _ret42, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "SelectByIdx failed: unknown result")
}

// Parameters:
//  - Name
//  - StartId
//  - Limit
func (p *IcliClient) SelectsByIdLimit(ctx context.Context, name string, startId int64, limit int64) (_r []*DataBean, _err error) {
  var _args43 IcliSelectsByIdLimitArgs
  _args43.Name = name
  _args43.StartId = startId
  _args43.Limit = limit
  var _result45 IcliSelectsByIdLimitResult
  var _meta44 thrift.ResponseMeta
  _meta44, _err = p.Client_().Call(ctx, "SelectsByIdLimit", &_args43, &_result45)
  p.SetLastResponseMeta_(_meta44)
  if _err != nil {
    return
  }
  return _result45.GetSuccess(), nil
}

// Parameters:
//  - Name
//  - Column
//  - Value
func (p *IcliClient) SelectAllByIdx(ctx context.Context, name string, column string, value []byte) (_r []*DataBean, _err error) {
  var _args46 IcliSelectAllByIdxArgs
  _args46.Name = name
  _args46.Column = column
  _args46.Value = value
  var _result48 IcliSelectAllByIdxResult
  var _meta47 thrift.ResponseMeta
  _meta47, _err = p.Client_().Call(ctx, "SelectAllByIdx", &_args46, &_result48)
  p.SetLastResponseMeta_(_meta47)
  if _err != nil {
    return
  }
  return _result48.GetSuccess(), nil
}

// Parameters:
//  - Name
//  - Column
//  - Value
//  - StartId
//  - Limit
func (p *IcliClient) SelectByIdxLimit(ctx context.Context, name string, column string, value [][]byte, startId int64, limit int64) (_r []*DataBean, _err error) {
  var _args49 IcliSelectByIdxLimitArgs
  _args49.Name = name
  _args49.Column = column
  _args49.Value = value
  _args49.StartId = startId
  _args49.Limit = limit
  var _result51 IcliSelectByIdxLimitResult
  var _meta50 thrift.ResponseMeta
  _meta50, _err = p.Client_().Call(ctx, "SelectByIdxLimit", &_args49, &_result51)
  p.SetLastResponseMeta_(_meta50)
  if _err != nil {
    return
  }
  return _result51.GetSuccess(), nil
}

// Parameters:
//  - Tb
func (p *IcliClient) Update(ctx context.Context, tb *TableBean) (_r *AckBean, _err error) {
  var _args52 IcliUpdateArgs
  _args52.Tb = tb
  var _result54 IcliUpdateResult
  var _meta53 thrift.ResponseMeta
  _meta53, _err = p.Client_().Call(ctx, "Update", &_args52, &_result54)
  p.SetLastResponseMeta_(_meta53)
  if _err != nil {
    return
  }
  if _ret55 := _result54.GetSuccess(); _ret55 != nil {
    return _ret55, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Update failed: unknown result")
}

// Parameters:
//  - Tb
func (p *IcliClient) Delete(ctx context.Context, tb *TableBean) (_r *AckBean, _err error) {
  var _args56 IcliDeleteArgs
  _args56.Tb = tb
  var _result58 IcliDeleteResult
  var _meta57 thrift.ResponseMeta
  _meta57, _err = p.Client_().Call(ctx, "Delete", &_args56, &_result58)
  p.SetLastResponseMeta_(_meta57)
  if _err != nil {
    return
  }
  if _ret59 := _result58.GetSuccess(); _ret59 != nil {
    return _ret59, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Delete failed: unknown result")
}

// Parameters:
//  - Tb
func (p *IcliClient) Insert(ctx context.Context, tb *TableBean) (_r *AckBean, _err error) {
  var _args60 IcliInsertArgs
  _args60.Tb = tb
  var _result62 IcliInsertResult
  var _meta61 thrift.ResponseMeta
  _meta61, _err = p.Client_().Call(ctx, "Insert", &_args60, &_result62)
  p.SetLastResponseMeta_(_meta61)
  if _err != nil {
    return
  }
  if _ret63 := _result62.GetSuccess(); _ret63 != nil {
    return _ret63, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Insert failed: unknown result")
}

// Parameters:
//  - Name
func (p *IcliClient) ShowTable(ctx context.Context, name string) (_r *TableBean, _err error) {
  var _args64 IcliShowTableArgs
  _args64.Name = name
  var _result66 IcliShowTableResult
  var _meta65 thrift.ResponseMeta
  _meta65, _err = p.Client_().Call(ctx, "ShowTable", &_args64, &_result66)
  p.SetLastResponseMeta_(_meta65)
  if _err != nil {
    return
  }
  if _ret67 := _result66.GetSuccess(); _ret67 != nil {
    return _ret67, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ShowTable failed: unknown result")
}

func (p *IcliClient) ShowAllTables(ctx context.Context) (_r []*TableBean, _err error) {
  var _args68 IcliShowAllTablesArgs
  var _result70 IcliShowAllTablesResult
  var _meta69 thrift.ResponseMeta
  _meta69, _err = p.Client_().Call(ctx, "ShowAllTables", &_args68, &_result70)
  p.SetLastResponseMeta_(_meta69)
  if _err != nil {
    return
  }
  return _result70.GetSuccess(), nil
}

type IcliProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Icli
}

func (p *IcliProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IcliProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IcliProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIcliProcessor(handler Icli) *IcliProcessor {

  self71 := &IcliProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self71.processorMap["Ping"] = &icliProcessorPing{handler:handler}
  self71.processorMap["Auth"] = &icliProcessorAuth{handler:handler}
  self71.processorMap["Create"] = &icliProcessorCreate{handler:handler}
  self71.processorMap["Alter"] = &icliProcessorAlter{handler:handler}
  self71.processorMap["Drop"] = &icliProcessorDrop{handler:handler}
  self71.processorMap["SelectId"] = &icliProcessorSelectId{handler:handler}
  self71.processorMap["SelectIdByIdx"] = &icliProcessorSelectIdByIdx{handler:handler}
  self71.processorMap["SelectById"] = &icliProcessorSelectById{handler:handler}
  self71.processorMap["SelectByIdx"] = &icliProcessorSelectByIdx{handler:handler}
  self71.processorMap["SelectsByIdLimit"] = &icliProcessorSelectsByIdLimit{handler:handler}
  self71.processorMap["SelectAllByIdx"] = &icliProcessorSelectAllByIdx{handler:handler}
  self71.processorMap["SelectByIdxLimit"] = &icliProcessorSelectByIdxLimit{handler:handler}
  self71.processorMap["Update"] = &icliProcessorUpdate{handler:handler}
  self71.processorMap["Delete"] = &icliProcessorDelete{handler:handler}
  self71.processorMap["Insert"] = &icliProcessorInsert{handler:handler}
  self71.processorMap["ShowTable"] = &icliProcessorShowTable{handler:handler}
  self71.processorMap["ShowAllTables"] = &icliProcessorShowAllTables{handler:handler}
return self71
}

func (p *IcliProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x72 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x72.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x72

}

type icliProcessorPing struct {
  handler Icli
}

func (p *icliProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err73 error
  args := IcliPingArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Ping", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliPingResult{}
  if retval, err2 := p.handler.Ping(ctx, args.I); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc74 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Ping", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err73 = thrift.WrapTException(err2)
    }
    if err2 := _exc74.Write(ctx, oprot); _write_err73 == nil && err2 != nil {
      _write_err73 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err73 == nil && err2 != nil {
      _write_err73 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err73 == nil && err2 != nil {
      _write_err73 = thrift.WrapTException(err2)
    }
    if _write_err73 != nil {
      return false, thrift.WrapTException(_write_err73)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Ping", thrift.REPLY, seqId); err2 != nil {
    _write_err73 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err73 == nil && err2 != nil {
    _write_err73 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err73 == nil && err2 != nil {
    _write_err73 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err73 == nil && err2 != nil {
    _write_err73 = thrift.WrapTException(err2)
  }
  if _write_err73 != nil {
    return false, thrift.WrapTException(_write_err73)
  }
  return true, err
}

type icliProcessorAuth struct {
  handler Icli
}

func (p *icliProcessorAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err75 error
  args := IcliAuthArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Auth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliAuthResult{}
  if retval, err2 := p.handler.Auth(ctx, args.S); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc76 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Auth: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Auth", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err75 = thrift.WrapTException(err2)
    }
    if err2 := _exc76.Write(ctx, oprot); _write_err75 == nil && err2 != nil {
      _write_err75 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err75 == nil && err2 != nil {
      _write_err75 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err75 == nil && err2 != nil {
      _write_err75 = thrift.WrapTException(err2)
    }
    if _write_err75 != nil {
      return false, thrift.WrapTException(_write_err75)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Auth", thrift.REPLY, seqId); err2 != nil {
    _write_err75 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err75 == nil && err2 != nil {
    _write_err75 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err75 == nil && err2 != nil {
    _write_err75 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err75 == nil && err2 != nil {
    _write_err75 = thrift.WrapTException(err2)
  }
  if _write_err75 != nil {
    return false, thrift.WrapTException(_write_err75)
  }
  return true, err
}

type icliProcessorCreate struct {
  handler Icli
}

func (p *icliProcessorCreate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err77 error
  args := IcliCreateArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Create", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliCreateResult{}
  if retval, err2 := p.handler.Create(ctx, args.Tb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc78 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Create: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Create", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err77 = thrift.WrapTException(err2)
    }
    if err2 := _exc78.Write(ctx, oprot); _write_err77 == nil && err2 != nil {
      _write_err77 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err77 == nil && err2 != nil {
      _write_err77 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err77 == nil && err2 != nil {
      _write_err77 = thrift.WrapTException(err2)
    }
    if _write_err77 != nil {
      return false, thrift.WrapTException(_write_err77)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Create", thrift.REPLY, seqId); err2 != nil {
    _write_err77 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err77 == nil && err2 != nil {
    _write_err77 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err77 == nil && err2 != nil {
    _write_err77 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err77 == nil && err2 != nil {
    _write_err77 = thrift.WrapTException(err2)
  }
  if _write_err77 != nil {
    return false, thrift.WrapTException(_write_err77)
  }
  return true, err
}

type icliProcessorAlter struct {
  handler Icli
}

func (p *icliProcessorAlter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err79 error
  args := IcliAlterArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Alter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliAlterResult{}
  if retval, err2 := p.handler.Alter(ctx, args.Tb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc80 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Alter: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Alter", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err79 = thrift.WrapTException(err2)
    }
    if err2 := _exc80.Write(ctx, oprot); _write_err79 == nil && err2 != nil {
      _write_err79 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err79 == nil && err2 != nil {
      _write_err79 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err79 == nil && err2 != nil {
      _write_err79 = thrift.WrapTException(err2)
    }
    if _write_err79 != nil {
      return false, thrift.WrapTException(_write_err79)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Alter", thrift.REPLY, seqId); err2 != nil {
    _write_err79 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err79 == nil && err2 != nil {
    _write_err79 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err79 == nil && err2 != nil {
    _write_err79 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err79 == nil && err2 != nil {
    _write_err79 = thrift.WrapTException(err2)
  }
  if _write_err79 != nil {
    return false, thrift.WrapTException(_write_err79)
  }
  return true, err
}

type icliProcessorDrop struct {
  handler Icli
}

func (p *icliProcessorDrop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err81 error
  args := IcliDropArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Drop", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliDropResult{}
  if retval, err2 := p.handler.Drop(ctx, args.Name); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc82 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Drop: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Drop", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err81 = thrift.WrapTException(err2)
    }
    if err2 := _exc82.Write(ctx, oprot); _write_err81 == nil && err2 != nil {
      _write_err81 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err81 == nil && err2 != nil {
      _write_err81 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err81 == nil && err2 != nil {
      _write_err81 = thrift.WrapTException(err2)
    }
    if _write_err81 != nil {
      return false, thrift.WrapTException(_write_err81)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Drop", thrift.REPLY, seqId); err2 != nil {
    _write_err81 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err81 == nil && err2 != nil {
    _write_err81 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err81 == nil && err2 != nil {
    _write_err81 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err81 == nil && err2 != nil {
    _write_err81 = thrift.WrapTException(err2)
  }
  if _write_err81 != nil {
    return false, thrift.WrapTException(_write_err81)
  }
  return true, err
}

type icliProcessorSelectId struct {
  handler Icli
}

func (p *icliProcessorSelectId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err83 error
  args := IcliSelectIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SelectId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliSelectIdResult{}
  if retval, err2 := p.handler.SelectId(ctx, args.Name); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc84 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectId: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "SelectId", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err83 = thrift.WrapTException(err2)
    }
    if err2 := _exc84.Write(ctx, oprot); _write_err83 == nil && err2 != nil {
      _write_err83 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err83 == nil && err2 != nil {
      _write_err83 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err83 == nil && err2 != nil {
      _write_err83 = thrift.WrapTException(err2)
    }
    if _write_err83 != nil {
      return false, thrift.WrapTException(_write_err83)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "SelectId", thrift.REPLY, seqId); err2 != nil {
    _write_err83 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err83 == nil && err2 != nil {
    _write_err83 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err83 == nil && err2 != nil {
    _write_err83 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err83 == nil && err2 != nil {
    _write_err83 = thrift.WrapTException(err2)
  }
  if _write_err83 != nil {
    return false, thrift.WrapTException(_write_err83)
  }
  return true, err
}

type icliProcessorSelectIdByIdx struct {
  handler Icli
}

func (p *icliProcessorSelectIdByIdx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err85 error
  args := IcliSelectIdByIdxArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SelectIdByIdx", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliSelectIdByIdxResult{}
  if retval, err2 := p.handler.SelectIdByIdx(ctx, args.Name, args.Column, args.Value); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc86 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectIdByIdx: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "SelectIdByIdx", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err85 = thrift.WrapTException(err2)
    }
    if err2 := _exc86.Write(ctx, oprot); _write_err85 == nil && err2 != nil {
      _write_err85 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err85 == nil && err2 != nil {
      _write_err85 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err85 == nil && err2 != nil {
      _write_err85 = thrift.WrapTException(err2)
    }
    if _write_err85 != nil {
      return false, thrift.WrapTException(_write_err85)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "SelectIdByIdx", thrift.REPLY, seqId); err2 != nil {
    _write_err85 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err85 == nil && err2 != nil {
    _write_err85 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err85 == nil && err2 != nil {
    _write_err85 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err85 == nil && err2 != nil {
    _write_err85 = thrift.WrapTException(err2)
  }
  if _write_err85 != nil {
    return false, thrift.WrapTException(_write_err85)
  }
  return true, err
}

type icliProcessorSelectById struct {
  handler Icli
}

func (p *icliProcessorSelectById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err87 error
  args := IcliSelectByIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SelectById", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliSelectByIdResult{}
  if retval, err2 := p.handler.SelectById(ctx, args.Name, args.ID); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc88 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectById: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "SelectById", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err87 = thrift.WrapTException(err2)
    }
    if err2 := _exc88.Write(ctx, oprot); _write_err87 == nil && err2 != nil {
      _write_err87 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err87 == nil && err2 != nil {
      _write_err87 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err87 == nil && err2 != nil {
      _write_err87 = thrift.WrapTException(err2)
    }
    if _write_err87 != nil {
      return false, thrift.WrapTException(_write_err87)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "SelectById", thrift.REPLY, seqId); err2 != nil {
    _write_err87 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err87 == nil && err2 != nil {
    _write_err87 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err87 == nil && err2 != nil {
    _write_err87 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err87 == nil && err2 != nil {
    _write_err87 = thrift.WrapTException(err2)
  }
  if _write_err87 != nil {
    return false, thrift.WrapTException(_write_err87)
  }
  return true, err
}

type icliProcessorSelectByIdx struct {
  handler Icli
}

func (p *icliProcessorSelectByIdx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err89 error
  args := IcliSelectByIdxArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SelectByIdx", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliSelectByIdxResult{}
  if retval, err2 := p.handler.SelectByIdx(ctx, args.Name, args.Column, args.Value); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc90 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectByIdx: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "SelectByIdx", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err89 = thrift.WrapTException(err2)
    }
    if err2 := _exc90.Write(ctx, oprot); _write_err89 == nil && err2 != nil {
      _write_err89 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err89 == nil && err2 != nil {
      _write_err89 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err89 == nil && err2 != nil {
      _write_err89 = thrift.WrapTException(err2)
    }
    if _write_err89 != nil {
      return false, thrift.WrapTException(_write_err89)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "SelectByIdx", thrift.REPLY, seqId); err2 != nil {
    _write_err89 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err89 == nil && err2 != nil {
    _write_err89 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err89 == nil && err2 != nil {
    _write_err89 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err89 == nil && err2 != nil {
    _write_err89 = thrift.WrapTException(err2)
  }
  if _write_err89 != nil {
    return false, thrift.WrapTException(_write_err89)
  }
  return true, err
}

type icliProcessorSelectsByIdLimit struct {
  handler Icli
}

func (p *icliProcessorSelectsByIdLimit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err91 error
  args := IcliSelectsByIdLimitArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SelectsByIdLimit", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliSelectsByIdLimitResult{}
  if retval, err2 := p.handler.SelectsByIdLimit(ctx, args.Name, args.StartId, args.Limit); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc92 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectsByIdLimit: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "SelectsByIdLimit", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err91 = thrift.WrapTException(err2)
    }
    if err2 := _exc92.Write(ctx, oprot); _write_err91 == nil && err2 != nil {
      _write_err91 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err91 == nil && err2 != nil {
      _write_err91 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err91 == nil && err2 != nil {
      _write_err91 = thrift.WrapTException(err2)
    }
    if _write_err91 != nil {
      return false, thrift.WrapTException(_write_err91)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "SelectsByIdLimit", thrift.REPLY, seqId); err2 != nil {
    _write_err91 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err91 == nil && err2 != nil {
    _write_err91 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err91 == nil && err2 != nil {
    _write_err91 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err91 == nil && err2 != nil {
    _write_err91 = thrift.WrapTException(err2)
  }
  if _write_err91 != nil {
    return false, thrift.WrapTException(_write_err91)
  }
  return true, err
}

type icliProcessorSelectAllByIdx struct {
  handler Icli
}

func (p *icliProcessorSelectAllByIdx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err93 error
  args := IcliSelectAllByIdxArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SelectAllByIdx", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliSelectAllByIdxResult{}
  if retval, err2 := p.handler.SelectAllByIdx(ctx, args.Name, args.Column, args.Value); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc94 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectAllByIdx: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "SelectAllByIdx", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err93 = thrift.WrapTException(err2)
    }
    if err2 := _exc94.Write(ctx, oprot); _write_err93 == nil && err2 != nil {
      _write_err93 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err93 == nil && err2 != nil {
      _write_err93 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err93 == nil && err2 != nil {
      _write_err93 = thrift.WrapTException(err2)
    }
    if _write_err93 != nil {
      return false, thrift.WrapTException(_write_err93)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "SelectAllByIdx", thrift.REPLY, seqId); err2 != nil {
    _write_err93 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err93 == nil && err2 != nil {
    _write_err93 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err93 == nil && err2 != nil {
    _write_err93 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err93 == nil && err2 != nil {
    _write_err93 = thrift.WrapTException(err2)
  }
  if _write_err93 != nil {
    return false, thrift.WrapTException(_write_err93)
  }
  return true, err
}

type icliProcessorSelectByIdxLimit struct {
  handler Icli
}

func (p *icliProcessorSelectByIdxLimit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err95 error
  args := IcliSelectByIdxLimitArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "SelectByIdxLimit", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliSelectByIdxLimitResult{}
  if retval, err2 := p.handler.SelectByIdxLimit(ctx, args.Name, args.Column, args.Value, args.StartId, args.Limit); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc96 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectByIdxLimit: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "SelectByIdxLimit", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err95 = thrift.WrapTException(err2)
    }
    if err2 := _exc96.Write(ctx, oprot); _write_err95 == nil && err2 != nil {
      _write_err95 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err95 == nil && err2 != nil {
      _write_err95 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err95 == nil && err2 != nil {
      _write_err95 = thrift.WrapTException(err2)
    }
    if _write_err95 != nil {
      return false, thrift.WrapTException(_write_err95)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "SelectByIdxLimit", thrift.REPLY, seqId); err2 != nil {
    _write_err95 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err95 == nil && err2 != nil {
    _write_err95 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err95 == nil && err2 != nil {
    _write_err95 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err95 == nil && err2 != nil {
    _write_err95 = thrift.WrapTException(err2)
  }
  if _write_err95 != nil {
    return false, thrift.WrapTException(_write_err95)
  }
  return true, err
}

type icliProcessorUpdate struct {
  handler Icli
}

func (p *icliProcessorUpdate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err97 error
  args := IcliUpdateArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Update", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliUpdateResult{}
  if retval, err2 := p.handler.Update(ctx, args.Tb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc98 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Update: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Update", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err97 = thrift.WrapTException(err2)
    }
    if err2 := _exc98.Write(ctx, oprot); _write_err97 == nil && err2 != nil {
      _write_err97 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err97 == nil && err2 != nil {
      _write_err97 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err97 == nil && err2 != nil {
      _write_err97 = thrift.WrapTException(err2)
    }
    if _write_err97 != nil {
      return false, thrift.WrapTException(_write_err97)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Update", thrift.REPLY, seqId); err2 != nil {
    _write_err97 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err97 == nil && err2 != nil {
    _write_err97 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err97 == nil && err2 != nil {
    _write_err97 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err97 == nil && err2 != nil {
    _write_err97 = thrift.WrapTException(err2)
  }
  if _write_err97 != nil {
    return false, thrift.WrapTException(_write_err97)
  }
  return true, err
}

type icliProcessorDelete struct {
  handler Icli
}

func (p *icliProcessorDelete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err99 error
  args := IcliDeleteArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Delete", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliDeleteResult{}
  if retval, err2 := p.handler.Delete(ctx, args.Tb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc100 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Delete: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Delete", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err99 = thrift.WrapTException(err2)
    }
    if err2 := _exc100.Write(ctx, oprot); _write_err99 == nil && err2 != nil {
      _write_err99 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err99 == nil && err2 != nil {
      _write_err99 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err99 == nil && err2 != nil {
      _write_err99 = thrift.WrapTException(err2)
    }
    if _write_err99 != nil {
      return false, thrift.WrapTException(_write_err99)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Delete", thrift.REPLY, seqId); err2 != nil {
    _write_err99 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err99 == nil && err2 != nil {
    _write_err99 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err99 == nil && err2 != nil {
    _write_err99 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err99 == nil && err2 != nil {
    _write_err99 = thrift.WrapTException(err2)
  }
  if _write_err99 != nil {
    return false, thrift.WrapTException(_write_err99)
  }
  return true, err
}

type icliProcessorInsert struct {
  handler Icli
}

func (p *icliProcessorInsert) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err101 error
  args := IcliInsertArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Insert", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliInsertResult{}
  if retval, err2 := p.handler.Insert(ctx, args.Tb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc102 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Insert: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Insert", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err101 = thrift.WrapTException(err2)
    }
    if err2 := _exc102.Write(ctx, oprot); _write_err101 == nil && err2 != nil {
      _write_err101 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err101 == nil && err2 != nil {
      _write_err101 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err101 == nil && err2 != nil {
      _write_err101 = thrift.WrapTException(err2)
    }
    if _write_err101 != nil {
      return false, thrift.WrapTException(_write_err101)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Insert", thrift.REPLY, seqId); err2 != nil {
    _write_err101 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err101 == nil && err2 != nil {
    _write_err101 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err101 == nil && err2 != nil {
    _write_err101 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err101 == nil && err2 != nil {
    _write_err101 = thrift.WrapTException(err2)
  }
  if _write_err101 != nil {
    return false, thrift.WrapTException(_write_err101)
  }
  return true, err
}

type icliProcessorShowTable struct {
  handler Icli
}

func (p *icliProcessorShowTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err103 error
  args := IcliShowTableArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ShowTable", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliShowTableResult{}
  if retval, err2 := p.handler.ShowTable(ctx, args.Name); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc104 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ShowTable: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "ShowTable", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err103 = thrift.WrapTException(err2)
    }
    if err2 := _exc104.Write(ctx, oprot); _write_err103 == nil && err2 != nil {
      _write_err103 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err103 == nil && err2 != nil {
      _write_err103 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err103 == nil && err2 != nil {
      _write_err103 = thrift.WrapTException(err2)
    }
    if _write_err103 != nil {
      return false, thrift.WrapTException(_write_err103)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ShowTable", thrift.REPLY, seqId); err2 != nil {
    _write_err103 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err103 == nil && err2 != nil {
    _write_err103 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err103 == nil && err2 != nil {
    _write_err103 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err103 == nil && err2 != nil {
    _write_err103 = thrift.WrapTException(err2)
  }
  if _write_err103 != nil {
    return false, thrift.WrapTException(_write_err103)
  }
  return true, err
}

type icliProcessorShowAllTables struct {
  handler Icli
}

func (p *icliProcessorShowAllTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err105 error
  args := IcliShowAllTablesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ShowAllTables", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IcliShowAllTablesResult{}
  if retval, err2 := p.handler.ShowAllTables(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc106 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ShowAllTables: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "ShowAllTables", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err105 = thrift.WrapTException(err2)
    }
    if err2 := _exc106.Write(ctx, oprot); _write_err105 == nil && err2 != nil {
      _write_err105 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err105 == nil && err2 != nil {
      _write_err105 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err105 == nil && err2 != nil {
      _write_err105 = thrift.WrapTException(err2)
    }
    if _write_err105 != nil {
      return false, thrift.WrapTException(_write_err105)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ShowAllTables", thrift.REPLY, seqId); err2 != nil {
    _write_err105 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err105 == nil && err2 != nil {
    _write_err105 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err105 == nil && err2 != nil {
    _write_err105 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err105 == nil && err2 != nil {
    _write_err105 = thrift.WrapTException(err2)
  }
  if _write_err105 != nil {
    return false, thrift.WrapTException(_write_err105)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - I
type IcliPingArgs struct {
  I int64 `thrift:"i,1" db:"i" json:"i"`
}

func NewIcliPingArgs() *IcliPingArgs {
  return &IcliPingArgs{}
}


func (p *IcliPingArgs) GetI() int64 {
  return p.I
}
func (p *IcliPingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliPingArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.I = v
}
  return nil
}

func (p *IcliPingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliPingArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "i", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:i: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.I)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:i: ", p), err) }
  return err
}

func (p *IcliPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliPingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliPingResult struct {
  Success *Ack `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliPingResult() *IcliPingResult {
  return &IcliPingResult{}
}

var IcliPingResult_Success_DEFAULT *Ack
func (p *IcliPingResult) GetSuccess() *Ack {
  if !p.IsSetSuccess() {
    return IcliPingResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliPingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliPingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliPingResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ack{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliPingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliPingResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliPingResult(%+v)", *p)
}

// Attributes:
//  - S
type IcliAuthArgs struct {
  S string `thrift:"s,1" db:"s" json:"s"`
}

func NewIcliAuthArgs() *IcliAuthArgs {
  return &IcliAuthArgs{}
}


func (p *IcliAuthArgs) GetS() string {
  return p.S
}
func (p *IcliAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliAuthArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.S = v
}
  return nil
}

func (p *IcliAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Auth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "s", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.S)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err) }
  return err
}

func (p *IcliAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliAuthResult struct {
  Success *Ack `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliAuthResult() *IcliAuthResult {
  return &IcliAuthResult{}
}

var IcliAuthResult_Success_DEFAULT *Ack
func (p *IcliAuthResult) GetSuccess() *Ack {
  if !p.IsSetSuccess() {
    return IcliAuthResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliAuthResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ack{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Auth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliAuthResult(%+v)", *p)
}

// Attributes:
//  - Tb
type IcliCreateArgs struct {
  Tb *TableBean `thrift:"tb,1" db:"tb" json:"tb"`
}

func NewIcliCreateArgs() *IcliCreateArgs {
  return &IcliCreateArgs{}
}

var IcliCreateArgs_Tb_DEFAULT *TableBean
func (p *IcliCreateArgs) GetTb() *TableBean {
  if !p.IsSetTb() {
    return IcliCreateArgs_Tb_DEFAULT
  }
return p.Tb
}
func (p *IcliCreateArgs) IsSetTb() bool {
  return p.Tb != nil
}

func (p *IcliCreateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliCreateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tb = &TableBean{}
  if err := p.Tb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tb), err)
  }
  return nil
}

func (p *IcliCreateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Create_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliCreateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tb: ", p), err) }
  if err := p.Tb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tb: ", p), err) }
  return err
}

func (p *IcliCreateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliCreateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliCreateResult struct {
  Success *Ack `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliCreateResult() *IcliCreateResult {
  return &IcliCreateResult{}
}

var IcliCreateResult_Success_DEFAULT *Ack
func (p *IcliCreateResult) GetSuccess() *Ack {
  if !p.IsSetSuccess() {
    return IcliCreateResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliCreateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliCreateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliCreateResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ack{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliCreateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Create_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliCreateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliCreateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliCreateResult(%+v)", *p)
}

// Attributes:
//  - Tb
type IcliAlterArgs struct {
  Tb *TableBean `thrift:"tb,1" db:"tb" json:"tb"`
}

func NewIcliAlterArgs() *IcliAlterArgs {
  return &IcliAlterArgs{}
}

var IcliAlterArgs_Tb_DEFAULT *TableBean
func (p *IcliAlterArgs) GetTb() *TableBean {
  if !p.IsSetTb() {
    return IcliAlterArgs_Tb_DEFAULT
  }
return p.Tb
}
func (p *IcliAlterArgs) IsSetTb() bool {
  return p.Tb != nil
}

func (p *IcliAlterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliAlterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tb = &TableBean{}
  if err := p.Tb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tb), err)
  }
  return nil
}

func (p *IcliAlterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Alter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliAlterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tb: ", p), err) }
  if err := p.Tb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tb: ", p), err) }
  return err
}

func (p *IcliAlterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliAlterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliAlterResult struct {
  Success *Ack `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliAlterResult() *IcliAlterResult {
  return &IcliAlterResult{}
}

var IcliAlterResult_Success_DEFAULT *Ack
func (p *IcliAlterResult) GetSuccess() *Ack {
  if !p.IsSetSuccess() {
    return IcliAlterResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliAlterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliAlterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliAlterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ack{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliAlterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Alter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliAlterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliAlterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliAlterResult(%+v)", *p)
}

// Attributes:
//  - Name
type IcliDropArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewIcliDropArgs() *IcliDropArgs {
  return &IcliDropArgs{}
}


func (p *IcliDropArgs) GetName() string {
  return p.Name
}
func (p *IcliDropArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliDropArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcliDropArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Drop_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliDropArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IcliDropArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliDropArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliDropResult struct {
  Success *Ack `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliDropResult() *IcliDropResult {
  return &IcliDropResult{}
}

var IcliDropResult_Success_DEFAULT *Ack
func (p *IcliDropResult) GetSuccess() *Ack {
  if !p.IsSetSuccess() {
    return IcliDropResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliDropResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliDropResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliDropResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ack{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliDropResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Drop_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliDropResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliDropResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliDropResult(%+v)", *p)
}

// Attributes:
//  - Name
type IcliSelectIdArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewIcliSelectIdArgs() *IcliSelectIdArgs {
  return &IcliSelectIdArgs{}
}


func (p *IcliSelectIdArgs) GetName() string {
  return p.Name
}
func (p *IcliSelectIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcliSelectIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IcliSelectIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliSelectIdResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliSelectIdResult() *IcliSelectIdResult {
  return &IcliSelectIdResult{}
}

var IcliSelectIdResult_Success_DEFAULT int64
func (p *IcliSelectIdResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IcliSelectIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *IcliSelectIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliSelectIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IcliSelectIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliSelectIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectIdResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - Column
//  - Value
type IcliSelectIdByIdxArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Column string `thrift:"column,2" db:"column" json:"column"`
  Value []byte `thrift:"value,3" db:"value" json:"value"`
}

func NewIcliSelectIdByIdxArgs() *IcliSelectIdByIdxArgs {
  return &IcliSelectIdByIdxArgs{}
}


func (p *IcliSelectIdByIdxArgs) GetName() string {
  return p.Name
}

func (p *IcliSelectIdByIdxArgs) GetColumn() string {
  return p.Column
}

func (p *IcliSelectIdByIdxArgs) GetValue() []byte {
  return p.Value
}
func (p *IcliSelectIdByIdxArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectIdByIdxArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcliSelectIdByIdxArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Column = v
}
  return nil
}

func (p *IcliSelectIdByIdxArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *IcliSelectIdByIdxArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectIdByIdx_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectIdByIdxArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IcliSelectIdByIdxArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Column)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column: ", p), err) }
  return err
}

func (p *IcliSelectIdByIdxArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *IcliSelectIdByIdxArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectIdByIdxArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliSelectIdByIdxResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliSelectIdByIdxResult() *IcliSelectIdByIdxResult {
  return &IcliSelectIdByIdxResult{}
}

var IcliSelectIdByIdxResult_Success_DEFAULT int64
func (p *IcliSelectIdByIdxResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return IcliSelectIdByIdxResult_Success_DEFAULT
  }
return *p.Success
}
func (p *IcliSelectIdByIdxResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliSelectIdByIdxResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectIdByIdxResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IcliSelectIdByIdxResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectIdByIdx_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectIdByIdxResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliSelectIdByIdxResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectIdByIdxResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - ID
type IcliSelectByIdArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  ID int64 `thrift:"id,2" db:"id" json:"id"`
}

func NewIcliSelectByIdArgs() *IcliSelectByIdArgs {
  return &IcliSelectByIdArgs{}
}


func (p *IcliSelectByIdArgs) GetName() string {
  return p.Name
}

func (p *IcliSelectByIdArgs) GetID() int64 {
  return p.ID
}
func (p *IcliSelectByIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectByIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcliSelectByIdArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *IcliSelectByIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectByIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IcliSelectByIdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *IcliSelectByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliSelectByIdResult struct {
  Success *DataBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliSelectByIdResult() *IcliSelectByIdResult {
  return &IcliSelectByIdResult{}
}

var IcliSelectByIdResult_Success_DEFAULT *DataBean
func (p *IcliSelectByIdResult) GetSuccess() *DataBean {
  if !p.IsSetSuccess() {
    return IcliSelectByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliSelectByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliSelectByIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectByIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DataBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliSelectByIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectByIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliSelectByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectByIdResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - Column
//  - Value
type IcliSelectByIdxArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Column string `thrift:"column,2" db:"column" json:"column"`
  Value []byte `thrift:"value,3" db:"value" json:"value"`
}

func NewIcliSelectByIdxArgs() *IcliSelectByIdxArgs {
  return &IcliSelectByIdxArgs{}
}


func (p *IcliSelectByIdxArgs) GetName() string {
  return p.Name
}

func (p *IcliSelectByIdxArgs) GetColumn() string {
  return p.Column
}

func (p *IcliSelectByIdxArgs) GetValue() []byte {
  return p.Value
}
func (p *IcliSelectByIdxArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectByIdxArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcliSelectByIdxArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Column = v
}
  return nil
}

func (p *IcliSelectByIdxArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *IcliSelectByIdxArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectByIdx_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectByIdxArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IcliSelectByIdxArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Column)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column: ", p), err) }
  return err
}

func (p *IcliSelectByIdxArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *IcliSelectByIdxArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectByIdxArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliSelectByIdxResult struct {
  Success *DataBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliSelectByIdxResult() *IcliSelectByIdxResult {
  return &IcliSelectByIdxResult{}
}

var IcliSelectByIdxResult_Success_DEFAULT *DataBean
func (p *IcliSelectByIdxResult) GetSuccess() *DataBean {
  if !p.IsSetSuccess() {
    return IcliSelectByIdxResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliSelectByIdxResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliSelectByIdxResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectByIdxResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DataBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliSelectByIdxResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectByIdx_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectByIdxResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliSelectByIdxResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectByIdxResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - StartId
//  - Limit
type IcliSelectsByIdLimitArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  StartId int64 `thrift:"startId,2" db:"startId" json:"startId"`
  Limit int64 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewIcliSelectsByIdLimitArgs() *IcliSelectsByIdLimitArgs {
  return &IcliSelectsByIdLimitArgs{}
}


func (p *IcliSelectsByIdLimitArgs) GetName() string {
  return p.Name
}

func (p *IcliSelectsByIdLimitArgs) GetStartId() int64 {
  return p.StartId
}

func (p *IcliSelectsByIdLimitArgs) GetLimit() int64 {
  return p.Limit
}
func (p *IcliSelectsByIdLimitArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectsByIdLimitArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcliSelectsByIdLimitArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartId = v
}
  return nil
}

func (p *IcliSelectsByIdLimitArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *IcliSelectsByIdLimitArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectsByIdLimit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectsByIdLimitArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IcliSelectsByIdLimitArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startId: ", p), err) }
  return err
}

func (p *IcliSelectsByIdLimitArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  return err
}

func (p *IcliSelectsByIdLimitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectsByIdLimitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliSelectsByIdLimitResult struct {
  Success []*DataBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliSelectsByIdLimitResult() *IcliSelectsByIdLimitResult {
  return &IcliSelectsByIdLimitResult{}
}

var IcliSelectsByIdLimitResult_Success_DEFAULT []*DataBean

func (p *IcliSelectsByIdLimitResult) GetSuccess() []*DataBean {
  return p.Success
}
func (p *IcliSelectsByIdLimitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliSelectsByIdLimitResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectsByIdLimitResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataBean, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem107 := &DataBean{}
    if err := _elem107.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem107), err)
    }
    p.Success = append(p.Success, _elem107)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcliSelectsByIdLimitResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectsByIdLimit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectsByIdLimitResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliSelectsByIdLimitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectsByIdLimitResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - Column
//  - Value
type IcliSelectAllByIdxArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Column string `thrift:"column,2" db:"column" json:"column"`
  Value []byte `thrift:"value,3" db:"value" json:"value"`
}

func NewIcliSelectAllByIdxArgs() *IcliSelectAllByIdxArgs {
  return &IcliSelectAllByIdxArgs{}
}


func (p *IcliSelectAllByIdxArgs) GetName() string {
  return p.Name
}

func (p *IcliSelectAllByIdxArgs) GetColumn() string {
  return p.Column
}

func (p *IcliSelectAllByIdxArgs) GetValue() []byte {
  return p.Value
}
func (p *IcliSelectAllByIdxArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectAllByIdxArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcliSelectAllByIdxArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Column = v
}
  return nil
}

func (p *IcliSelectAllByIdxArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *IcliSelectAllByIdxArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectAllByIdx_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectAllByIdxArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IcliSelectAllByIdxArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Column)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column: ", p), err) }
  return err
}

func (p *IcliSelectAllByIdxArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *IcliSelectAllByIdxArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectAllByIdxArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliSelectAllByIdxResult struct {
  Success []*DataBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliSelectAllByIdxResult() *IcliSelectAllByIdxResult {
  return &IcliSelectAllByIdxResult{}
}

var IcliSelectAllByIdxResult_Success_DEFAULT []*DataBean

func (p *IcliSelectAllByIdxResult) GetSuccess() []*DataBean {
  return p.Success
}
func (p *IcliSelectAllByIdxResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliSelectAllByIdxResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectAllByIdxResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataBean, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem108 := &DataBean{}
    if err := _elem108.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem108), err)
    }
    p.Success = append(p.Success, _elem108)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcliSelectAllByIdxResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectAllByIdx_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectAllByIdxResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliSelectAllByIdxResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectAllByIdxResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - Column
//  - Value
//  - StartId
//  - Limit
type IcliSelectByIdxLimitArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Column string `thrift:"column,2" db:"column" json:"column"`
  Value [][]byte `thrift:"value,3" db:"value" json:"value"`
  StartId int64 `thrift:"startId,4" db:"startId" json:"startId"`
  Limit int64 `thrift:"limit,5" db:"limit" json:"limit"`
}

func NewIcliSelectByIdxLimitArgs() *IcliSelectByIdxLimitArgs {
  return &IcliSelectByIdxLimitArgs{}
}


func (p *IcliSelectByIdxLimitArgs) GetName() string {
  return p.Name
}

func (p *IcliSelectByIdxLimitArgs) GetColumn() string {
  return p.Column
}

func (p *IcliSelectByIdxLimitArgs) GetValue() [][]byte {
  return p.Value
}

func (p *IcliSelectByIdxLimitArgs) GetStartId() int64 {
  return p.StartId
}

func (p *IcliSelectByIdxLimitArgs) GetLimit() int64 {
  return p.Limit
}
func (p *IcliSelectByIdxLimitArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectByIdxLimitArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcliSelectByIdxLimitArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Column = v
}
  return nil
}

func (p *IcliSelectByIdxLimitArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Value =  tSlice
  for i := 0; i < size; i ++ {
var _elem109 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem109 = v
}
    p.Value = append(p.Value, _elem109)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcliSelectByIdxLimitArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartId = v
}
  return nil
}

func (p *IcliSelectByIdxLimitArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *IcliSelectByIdxLimitArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectByIdxLimit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectByIdxLimitArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IcliSelectByIdxLimitArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Column)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column: ", p), err) }
  return err
}

func (p *IcliSelectByIdxLimitArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Value)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Value {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *IcliSelectByIdxLimitArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startId: ", p), err) }
  return err
}

func (p *IcliSelectByIdxLimitArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err) }
  return err
}

func (p *IcliSelectByIdxLimitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectByIdxLimitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliSelectByIdxLimitResult struct {
  Success []*DataBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliSelectByIdxLimitResult() *IcliSelectByIdxLimitResult {
  return &IcliSelectByIdxLimitResult{}
}

var IcliSelectByIdxLimitResult_Success_DEFAULT []*DataBean

func (p *IcliSelectByIdxLimitResult) GetSuccess() []*DataBean {
  return p.Success
}
func (p *IcliSelectByIdxLimitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliSelectByIdxLimitResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliSelectByIdxLimitResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataBean, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem110 := &DataBean{}
    if err := _elem110.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem110), err)
    }
    p.Success = append(p.Success, _elem110)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcliSelectByIdxLimitResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SelectByIdxLimit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliSelectByIdxLimitResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliSelectByIdxLimitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliSelectByIdxLimitResult(%+v)", *p)
}

// Attributes:
//  - Tb
type IcliUpdateArgs struct {
  Tb *TableBean `thrift:"tb,1" db:"tb" json:"tb"`
}

func NewIcliUpdateArgs() *IcliUpdateArgs {
  return &IcliUpdateArgs{}
}

var IcliUpdateArgs_Tb_DEFAULT *TableBean
func (p *IcliUpdateArgs) GetTb() *TableBean {
  if !p.IsSetTb() {
    return IcliUpdateArgs_Tb_DEFAULT
  }
return p.Tb
}
func (p *IcliUpdateArgs) IsSetTb() bool {
  return p.Tb != nil
}

func (p *IcliUpdateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliUpdateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tb = &TableBean{}
  if err := p.Tb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tb), err)
  }
  return nil
}

func (p *IcliUpdateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Update_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliUpdateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tb: ", p), err) }
  if err := p.Tb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tb: ", p), err) }
  return err
}

func (p *IcliUpdateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliUpdateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliUpdateResult struct {
  Success *AckBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliUpdateResult() *IcliUpdateResult {
  return &IcliUpdateResult{}
}

var IcliUpdateResult_Success_DEFAULT *AckBean
func (p *IcliUpdateResult) GetSuccess() *AckBean {
  if !p.IsSetSuccess() {
    return IcliUpdateResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliUpdateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliUpdateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliUpdateResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AckBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliUpdateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Update_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliUpdateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliUpdateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliUpdateResult(%+v)", *p)
}

// Attributes:
//  - Tb
type IcliDeleteArgs struct {
  Tb *TableBean `thrift:"tb,1" db:"tb" json:"tb"`
}

func NewIcliDeleteArgs() *IcliDeleteArgs {
  return &IcliDeleteArgs{}
}

var IcliDeleteArgs_Tb_DEFAULT *TableBean
func (p *IcliDeleteArgs) GetTb() *TableBean {
  if !p.IsSetTb() {
    return IcliDeleteArgs_Tb_DEFAULT
  }
return p.Tb
}
func (p *IcliDeleteArgs) IsSetTb() bool {
  return p.Tb != nil
}

func (p *IcliDeleteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliDeleteArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tb = &TableBean{}
  if err := p.Tb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tb), err)
  }
  return nil
}

func (p *IcliDeleteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Delete_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliDeleteArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tb: ", p), err) }
  if err := p.Tb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tb: ", p), err) }
  return err
}

func (p *IcliDeleteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliDeleteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliDeleteResult struct {
  Success *AckBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliDeleteResult() *IcliDeleteResult {
  return &IcliDeleteResult{}
}

var IcliDeleteResult_Success_DEFAULT *AckBean
func (p *IcliDeleteResult) GetSuccess() *AckBean {
  if !p.IsSetSuccess() {
    return IcliDeleteResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliDeleteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliDeleteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliDeleteResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AckBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliDeleteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Delete_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliDeleteResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliDeleteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliDeleteResult(%+v)", *p)
}

// Attributes:
//  - Tb
type IcliInsertArgs struct {
  Tb *TableBean `thrift:"tb,1" db:"tb" json:"tb"`
}

func NewIcliInsertArgs() *IcliInsertArgs {
  return &IcliInsertArgs{}
}

var IcliInsertArgs_Tb_DEFAULT *TableBean
func (p *IcliInsertArgs) GetTb() *TableBean {
  if !p.IsSetTb() {
    return IcliInsertArgs_Tb_DEFAULT
  }
return p.Tb
}
func (p *IcliInsertArgs) IsSetTb() bool {
  return p.Tb != nil
}

func (p *IcliInsertArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliInsertArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tb = &TableBean{}
  if err := p.Tb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tb), err)
  }
  return nil
}

func (p *IcliInsertArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Insert_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliInsertArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tb: ", p), err) }
  if err := p.Tb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tb: ", p), err) }
  return err
}

func (p *IcliInsertArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliInsertArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliInsertResult struct {
  Success *AckBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliInsertResult() *IcliInsertResult {
  return &IcliInsertResult{}
}

var IcliInsertResult_Success_DEFAULT *AckBean
func (p *IcliInsertResult) GetSuccess() *AckBean {
  if !p.IsSetSuccess() {
    return IcliInsertResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliInsertResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliInsertResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliInsertResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AckBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliInsertResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Insert_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliInsertResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliInsertResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliInsertResult(%+v)", *p)
}

// Attributes:
//  - Name
type IcliShowTableArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewIcliShowTableArgs() *IcliShowTableArgs {
  return &IcliShowTableArgs{}
}


func (p *IcliShowTableArgs) GetName() string {
  return p.Name
}
func (p *IcliShowTableArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliShowTableArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IcliShowTableArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowTable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliShowTableArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IcliShowTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliShowTableArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliShowTableResult struct {
  Success *TableBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliShowTableResult() *IcliShowTableResult {
  return &IcliShowTableResult{}
}

var IcliShowTableResult_Success_DEFAULT *TableBean
func (p *IcliShowTableResult) GetSuccess() *TableBean {
  if !p.IsSetSuccess() {
    return IcliShowTableResult_Success_DEFAULT
  }
return p.Success
}
func (p *IcliShowTableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliShowTableResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliShowTableResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TableBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IcliShowTableResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowTable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliShowTableResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliShowTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliShowTableResult(%+v)", *p)
}

type IcliShowAllTablesArgs struct {
}

func NewIcliShowAllTablesArgs() *IcliShowAllTablesArgs {
  return &IcliShowAllTablesArgs{}
}

func (p *IcliShowAllTablesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliShowAllTablesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowAllTables_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliShowAllTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliShowAllTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IcliShowAllTablesResult struct {
  Success []*TableBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIcliShowAllTablesResult() *IcliShowAllTablesResult {
  return &IcliShowAllTablesResult{}
}

var IcliShowAllTablesResult_Success_DEFAULT []*TableBean

func (p *IcliShowAllTablesResult) GetSuccess() []*TableBean {
  return p.Success
}
func (p *IcliShowAllTablesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IcliShowAllTablesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IcliShowAllTablesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TableBean, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem111 := &TableBean{}
    if err := _elem111.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem111), err)
    }
    p.Success = append(p.Success, _elem111)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IcliShowAllTablesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ShowAllTables_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IcliShowAllTablesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IcliShowAllTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IcliShowAllTablesResult(%+v)", *p)
}


