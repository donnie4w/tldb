// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package stub

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/donnie4w/gothrift/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Tablename
//  - ID
//  - Idx
//  - Field
type TableStub struct {
  Tablename string `thrift:"Tablename,1,required" db:"Tablename" json:"Tablename"`
  ID int64 `thrift:"Id,2,required" db:"Id" json:"Id"`
  Idx map[string]int8 `thrift:"Idx,3" db:"Idx" json:"Idx,omitempty"`
  Field map[string][]byte `thrift:"Field,4" db:"Field" json:"Field,omitempty"`
}

func NewTableStub() *TableStub {
  return &TableStub{}
}


func (p *TableStub) GetTablename() string {
  return p.Tablename
}

func (p *TableStub) GetID() int64 {
  return p.ID
}
var TableStub_Idx_DEFAULT map[string]int8

func (p *TableStub) GetIdx() map[string]int8 {
  return p.Idx
}
var TableStub_Field_DEFAULT map[string][]byte

func (p *TableStub) GetField() map[string][]byte {
  return p.Field
}
func (p *TableStub) IsSetIdx() bool {
  return p.Idx != nil
}

func (p *TableStub) IsSetField() bool {
  return p.Field != nil
}

func (p *TableStub) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTablename bool = false;
  var issetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTablename = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTablename{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tablename is not set"));
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  return nil
}

func (p *TableStub)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Tablename = v
}
  return nil
}

func (p *TableStub)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TableStub)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int8, size)
  p.Idx =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 int8
    if v, err := iprot.ReadByte(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := int8(v)
    _val1 = temp
}
    p.Idx[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TableStub)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Field =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.Field[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TableStub) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TableStub"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TableStub) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Tablename", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Tablename: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tablename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Tablename (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Tablename: ", p), err) }
  return err
}

func (p *TableStub) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Id: ", p), err) }
  return err
}

func (p *TableStub) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIdx() {
    if err := oprot.WriteFieldBegin(ctx, "Idx", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Idx: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.BYTE, len(p.Idx)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Idx {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteByte(ctx, int8(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Idx: ", p), err) }
  }
  return err
}

func (p *TableStub) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetField() {
    if err := oprot.WriteFieldBegin(ctx, "Field", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Field: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Field)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Field {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Field: ", p), err) }
  }
  return err
}

func (p *TableStub) Equals(other *TableStub) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Tablename != other.Tablename { return false }
  if p.ID != other.ID { return false }
  if len(p.Idx) != len(other.Idx) { return false }
  for k, _tgt := range p.Idx {
    _src4 := other.Idx[k]
    if _tgt != _src4 { return false }
  }
  if len(p.Field) != len(other.Field) { return false }
  for k, _tgt := range p.Field {
    _src5 := other.Field[k]
    if bytes.Compare(_tgt, _src5) != 0 { return false }
  }
  return true
}

func (p *TableStub) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TableStub(%+v)", *p)
}

func (p *TableStub) Validate() error {
  return nil
}
// Attributes:
//  - Start
//  - Limit
//  - TableName
//  - IdxName
//  - IdxValue
//  - IdxValues
//  - Stub
//  - StubArray
//  - TopicKey
//  - Seq
//  - Err
//  - Ids
type TableParam struct {
  Start int64 `thrift:"start,1,required" db:"start" json:"start"`
  Limit int64 `thrift:"limit,2,required" db:"limit" json:"limit"`
  TableName string `thrift:"tableName,3,required" db:"tableName" json:"tableName"`
  IdxName string `thrift:"idxName,4,required" db:"idxName" json:"idxName"`
  IdxValue []byte `thrift:"idxValue,5" db:"idxValue" json:"idxValue,omitempty"`
  IdxValues [][]byte `thrift:"idxValues,6" db:"idxValues" json:"idxValues,omitempty"`
  Stub *TableStub `thrift:"stub,7" db:"stub" json:"stub,omitempty"`
  StubArray []*TableStub `thrift:"stubArray,8" db:"stubArray" json:"stubArray,omitempty"`
  TopicKey string `thrift:"topicKey,9,required" db:"topicKey" json:"topicKey"`
  Seq int64 `thrift:"seq,10,required" db:"seq" json:"seq"`
  Err string `thrift:"err,11,required" db:"err" json:"err"`
  Ids []int64 `thrift:"ids,12" db:"ids" json:"ids,omitempty"`
}

func NewTableParam() *TableParam {
  return &TableParam{}
}


func (p *TableParam) GetStart() int64 {
  return p.Start
}

func (p *TableParam) GetLimit() int64 {
  return p.Limit
}

func (p *TableParam) GetTableName() string {
  return p.TableName
}

func (p *TableParam) GetIdxName() string {
  return p.IdxName
}
var TableParam_IdxValue_DEFAULT []byte

func (p *TableParam) GetIdxValue() []byte {
  return p.IdxValue
}
var TableParam_IdxValues_DEFAULT [][]byte

func (p *TableParam) GetIdxValues() [][]byte {
  return p.IdxValues
}
var TableParam_Stub_DEFAULT *TableStub
func (p *TableParam) GetStub() *TableStub {
  if !p.IsSetStub() {
    return TableParam_Stub_DEFAULT
  }
return p.Stub
}
var TableParam_StubArray_DEFAULT []*TableStub

func (p *TableParam) GetStubArray() []*TableStub {
  return p.StubArray
}

func (p *TableParam) GetTopicKey() string {
  return p.TopicKey
}

func (p *TableParam) GetSeq() int64 {
  return p.Seq
}

func (p *TableParam) GetErr() string {
  return p.Err
}
var TableParam_Ids_DEFAULT []int64

func (p *TableParam) GetIds() []int64 {
  return p.Ids
}
func (p *TableParam) IsSetIdxValue() bool {
  return p.IdxValue != nil
}

func (p *TableParam) IsSetIdxValues() bool {
  return p.IdxValues != nil
}

func (p *TableParam) IsSetStub() bool {
  return p.Stub != nil
}

func (p *TableParam) IsSetStubArray() bool {
  return p.StubArray != nil
}

func (p *TableParam) IsSetIds() bool {
  return p.Ids != nil
}

func (p *TableParam) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStart bool = false;
  var issetLimit bool = false;
  var issetTableName bool = false;
  var issetIdxName bool = false;
  var issetTopicKey bool = false;
  var issetSeq bool = false;
  var issetErr bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetStart = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetLimit = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTableName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetIdxName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
        issetTopicKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
        issetSeq = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
        issetErr = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStart{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Start is not set"));
  }
  if !issetLimit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Limit is not set"));
  }
  if !issetTableName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableName is not set"));
  }
  if !issetIdxName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IdxName is not set"));
  }
  if !issetTopicKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopicKey is not set"));
  }
  if !issetSeq{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Seq is not set"));
  }
  if !issetErr{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Err is not set"));
  }
  return nil
}

func (p *TableParam)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *TableParam)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *TableParam)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *TableParam)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IdxName = v
}
  return nil
}

func (p *TableParam)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IdxValue = v
}
  return nil
}

func (p *TableParam)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.IdxValues =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.IdxValues = append(p.IdxValues, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TableParam)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.Stub = &TableStub{}
  if err := p.Stub.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stub), err)
  }
  return nil
}

func (p *TableParam)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TableStub, 0, size)
  p.StubArray =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &TableStub{}
    if err := _elem7.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.StubArray = append(p.StubArray, _elem7)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TableParam)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TopicKey = v
}
  return nil
}

func (p *TableParam)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TableParam)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Err = v
}
  return nil
}

func (p *TableParam)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.Ids = append(p.Ids, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TableParam) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TableParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TableParam) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start: ", p), err) }
  return err
}

func (p *TableParam) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  return err
}

func (p *TableParam) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tableName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tableName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tableName: ", p), err) }
  return err
}

func (p *TableParam) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "idxName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:idxName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IdxName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idxName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:idxName: ", p), err) }
  return err
}

func (p *TableParam) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIdxValue() {
    if err := oprot.WriteFieldBegin(ctx, "idxValue", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:idxValue: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.IdxValue); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.idxValue (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:idxValue: ", p), err) }
  }
  return err
}

func (p *TableParam) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIdxValues() {
    if err := oprot.WriteFieldBegin(ctx, "idxValues", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:idxValues: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.IdxValues)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.IdxValues {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:idxValues: ", p), err) }
  }
  return err
}

func (p *TableParam) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStub() {
    if err := oprot.WriteFieldBegin(ctx, "stub", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stub: ", p), err) }
    if err := p.Stub.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stub), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stub: ", p), err) }
  }
  return err
}

func (p *TableParam) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStubArray() {
    if err := oprot.WriteFieldBegin(ctx, "stubArray", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stubArray: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StubArray)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StubArray {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stubArray: ", p), err) }
  }
  return err
}

func (p *TableParam) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "topicKey", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:topicKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TopicKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.topicKey (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:topicKey: ", p), err) }
  return err
}

func (p *TableParam) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:seq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:seq: ", p), err) }
  return err
}

func (p *TableParam) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:err: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Err)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:err: ", p), err) }
  return err
}

func (p *TableParam) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIds() {
    if err := oprot.WriteFieldBegin(ctx, "ids", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:ids: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Ids)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Ids {
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:ids: ", p), err) }
  }
  return err
}

func (p *TableParam) Equals(other *TableParam) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Start != other.Start { return false }
  if p.Limit != other.Limit { return false }
  if p.TableName != other.TableName { return false }
  if p.IdxName != other.IdxName { return false }
  if bytes.Compare(p.IdxValue, other.IdxValue) != 0 { return false }
  if len(p.IdxValues) != len(other.IdxValues) { return false }
  for i, _tgt := range p.IdxValues {
    _src9 := other.IdxValues[i]
    if bytes.Compare(_tgt, _src9) != 0 { return false }
  }
  if !p.Stub.Equals(other.Stub) { return false }
  if len(p.StubArray) != len(other.StubArray) { return false }
  for i, _tgt := range p.StubArray {
    _src10 := other.StubArray[i]
    if !_tgt.Equals(_src10) { return false }
  }
  if p.TopicKey != other.TopicKey { return false }
  if p.Seq != other.Seq { return false }
  if p.Err != other.Err { return false }
  if len(p.Ids) != len(other.Ids) { return false }
  for i, _tgt := range p.Ids {
    _src11 := other.Ids[i]
    if _tgt != _src11 { return false }
  }
  return true
}

func (p *TableParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TableParam(%+v)", *p)
}

func (p *TableParam) Validate() error {
  return nil
}
// Attributes:
//  - IsLocal
//  - Uuids
//  - Value
type DataBeen struct {
  IsLocal bool `thrift:"IsLocal,1,required" db:"IsLocal" json:"IsLocal"`
  Uuids []int64 `thrift:"Uuids,2" db:"Uuids" json:"Uuids,omitempty"`
  Value []byte `thrift:"Value,3" db:"Value" json:"Value,omitempty"`
}

func NewDataBeen() *DataBeen {
  return &DataBeen{}
}


func (p *DataBeen) GetIsLocal() bool {
  return p.IsLocal
}
var DataBeen_Uuids_DEFAULT []int64

func (p *DataBeen) GetUuids() []int64 {
  return p.Uuids
}
var DataBeen_Value_DEFAULT []byte

func (p *DataBeen) GetValue() []byte {
  return p.Value
}
func (p *DataBeen) IsSetUuids() bool {
  return p.Uuids != nil
}

func (p *DataBeen) IsSetValue() bool {
  return p.Value != nil
}

func (p *DataBeen) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsLocal bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIsLocal = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsLocal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsLocal is not set"));
  }
  return nil
}

func (p *DataBeen)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsLocal = v
}
  return nil
}

func (p *DataBeen)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Uuids =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Uuids = append(p.Uuids, _elem12)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataBeen)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *DataBeen) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DataBeen"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataBeen) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "IsLocal", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:IsLocal: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsLocal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.IsLocal (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:IsLocal: ", p), err) }
  return err
}

func (p *DataBeen) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUuids() {
    if err := oprot.WriteFieldBegin(ctx, "Uuids", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Uuids: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Uuids)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Uuids {
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Uuids: ", p), err) }
  }
  return err
}

func (p *DataBeen) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin(ctx, "Value", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Value: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Value); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Value (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Value: ", p), err) }
  }
  return err
}

func (p *DataBeen) Equals(other *DataBeen) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IsLocal != other.IsLocal { return false }
  if len(p.Uuids) != len(other.Uuids) { return false }
  for i, _tgt := range p.Uuids {
    _src13 := other.Uuids[i]
    if _tgt != _src13 { return false }
  }
  if bytes.Compare(p.Value, other.Value) != 0 { return false }
  return true
}

func (p *DataBeen) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataBeen(%+v)", *p)
}

func (p *DataBeen) Validate() error {
  return nil
}
// Attributes:
//  - IdxMap
type IdxStub struct {
  IdxMap map[string]string `thrift:"IdxMap,1" db:"IdxMap" json:"IdxMap,omitempty"`
}

func NewIdxStub() *IdxStub {
  return &IdxStub{}
}

var IdxStub_IdxMap_DEFAULT map[string]string

func (p *IdxStub) GetIdxMap() map[string]string {
  return p.IdxMap
}
func (p *IdxStub) IsSetIdxMap() bool {
  return p.IdxMap != nil
}

func (p *IdxStub) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdxStub)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.IdxMap =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
var _val15 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val15 = v
}
    p.IdxMap[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *IdxStub) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdxStub"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdxStub) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIdxMap() {
    if err := oprot.WriteFieldBegin(ctx, "IdxMap", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:IdxMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.IdxMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.IdxMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:IdxMap: ", p), err) }
  }
  return err
}

func (p *IdxStub) Equals(other *IdxStub) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.IdxMap) != len(other.IdxMap) { return false }
  for k, _tgt := range p.IdxMap {
    _src16 := other.IdxMap[k]
    if _tgt != _src16 { return false }
  }
  return true
}

func (p *IdxStub) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdxStub(%+v)", *p)
}

func (p *IdxStub) Validate() error {
  return nil
}
